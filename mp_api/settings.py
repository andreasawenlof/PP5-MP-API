"""
Django settings for mp_api project.

Generated by 'django-admin startproject' using Django 4.2.18.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url
from datetime import timedelta

import os

if os.path.exists("env.py"):
    import env  # ✅ This ensures env.py is actually loaded


CLOUDINARY_STORAGE = {"CLOUDINARY_URL": os.environ.get("CLOUDINARY_URL")}
MEDIA_URL = "/media/"
DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
DEBUG = "DEVELOPER" in os.environ

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOST", "").split(",") + [
    "localhost",
    "127.0.0.1",
    "localhost:3000",  # React frontend
    "mp-frontend-4a5fc1537e05.herokuapp.com",  # React frontend deploy
    "mp-api-2f2442c94bb0.herokuapp.com",  # backend deploy
]

CORS_ALLOWED_ORIGINS = [
    "https://mp-frontend-4a5fc1537e05.herokuapp.com",  # ✅ Your deployed frontend
    "http://localhost:3000",  # ✅ Local frontend for testing
]

CSRF_TRUSTED_ORIGINS = [
    "https://mp-frontend-4a5fc1537e05.herokuapp.com",
    "http://localhost:3000",
]

CORS_ALLOW_CREDENTIALS = True  # ✅ Allow cookies for authentication

CORS_ALLOW_METHODS = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]

CORS_ALLOW_HEADERS = [
    "accept",
    "authorization",
    "content-type",
    "x-csrftoken",
    "x-requested-with",
]


# -----------------------------------------------------
# REST_AUTH & SIMPLE_JWT SETTINGS
# -----------------------------------------------------
REST_AUTH = {
    "USE_JWT": True,
    "TOKEN_MODEL": None,
    "JWT_AUTH_COOKIE": "my-app-auth",
    "JWT_AUTH_REFRESH_COOKIE": "my-refresh-token",
    "JWT_AUTH_SAMESITE": "None",
    "JWT_AUTH_SECURE": True,  # We can keep this False in dev
    "JWT_AUTH_HTTPONLY": True,  # We'll override in test mode below
    "OLD_PASSWORD_FIELD_ENABLED": True,
    "LOGOUT_ON_PASSWORD_CHANGE": False,
    "SESSION_LOGIN": False,
    "USER_DETAILS_SERIALIZER": "mp_api.serializers.UserSerializer",
}

SIMPLE_JWT = {
    # So the refresh token we get at login doesn't change
    "ACCESS_TOKEN_LIFETIME": timedelta(days=30),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}

# -----------------------------------------------------
# OVERRIDES FOR TEST MODE
# -----------------------------------------------------
# if 'test' in sys.argv:
#     SIMPLE_JWT['ACCESS_TOKEN_LIFETIME'] = timedelta(seconds=5)
#     SIMPLE_JWT['REFRESH_TOKEN_LIFETIME'] = timedelta(seconds=10)

#     # So we can pass the token in the JSON body
#     REST_AUTH['JWT_AUTH_HTTPONLY'] = False

#     # Use JWTAuthentication instead of dj_rest_auth.jwt_auth.JWTCookieAuthentication
#     REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'] = [
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ]

if "DEVELOPER" not in os.environ:
    REST_FRAMEWORK["DEFAULT_RENDERER_CLASSES"] = [
        "rest_framework.renderers.JSONRenderer",
    ]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    # Third-Party Apps
    "rest_framework",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "dj_rest_auth",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "dj_rest_auth.registration",
    "cloudinary",
    "cloudinary_storage",
    "django_filters",
    # Local Apps
    "tracks",
    "albums",
    "instruments",
    "profiles",
    "comments",
    "reviews",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

SITE_ID = 1  # Required for allauth

ROOT_URLCONF = "mp_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mp_api.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.parse(
        os.environ.get("DATABASE_URL", "sqlite:///" + str(BASE_DIR / "db.sqlite3"))
    )
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
