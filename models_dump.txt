# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AccountEmailaddress(models.Model):
    verified = models.BooleanField()
    primary = models.BooleanField()
    user = models.ForeignKey('AuthUser', models.DO_NOTHING)
    email = models.CharField(unique=True, max_length=254)

    class Meta:
        managed = False
        db_table = 'account_emailaddress'
        unique_together = (('user', 'primary'), ('user', 'email'),)


class AccountEmailconfirmation(models.Model):
    created = models.DateTimeField()
    sent = models.DateTimeField(blank=True, null=True)
    key = models.CharField(unique=True, max_length=64)
    email_address = models.ForeignKey(AccountEmailaddress, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'account_emailconfirmation'


class AlbumsAlbum(models.Model):
    title = models.CharField(max_length=255)
    cover_art = models.CharField(max_length=255, blank=True, null=True)
    project_type = models.ForeignKey('TracksProjecttype', models.DO_NOTHING, blank=True, null=True)
    genre = models.ForeignKey('TracksGenre', models.DO_NOTHING, blank=True, null=True)
    mood = models.ForeignKey('TracksMood', models.DO_NOTHING, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    notes = models.TextField()
    owner = models.ForeignKey('AuthUser', models.DO_NOTHING)
    status = models.CharField(max_length=25)

    class Meta:
        managed = False
        db_table = 'albums_album'


class AlbumsAlbumTracks(models.Model):
    album = models.ForeignKey(AlbumsAlbum, models.DO_NOTHING)
    track = models.ForeignKey('TracksTrack', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'albums_album_tracks'
        unique_together = (('album', 'track'),)


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    first_name = models.CharField(max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class AuthtokenToken(models.Model):
    key = models.CharField(primary_key=True, max_length=40)
    created = models.DateTimeField()
    user = models.OneToOneField(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'authtoken_token'


class CommentsComment(models.Model):
    content = models.TextField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    album = models.ForeignKey(AlbumsAlbum, models.DO_NOTHING, blank=True, null=True)
    track = models.ForeignKey('TracksTrack', models.DO_NOTHING, blank=True, null=True)
    owner = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'comments_comment'


class DjangoAdminLog(models.Model):
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    action_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class InstrumentsInstrument(models.Model):
    name = models.CharField(unique=True, max_length=255)
    image = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'instruments_instrument'


class InstrumentsInstrumentCategories(models.Model):
    instrument = models.ForeignKey(InstrumentsInstrument, models.DO_NOTHING)
    instrumentcategory = models.ForeignKey('InstrumentsInstrumentcategory', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'instruments_instrument_categories'
        unique_together = (('instrument', 'instrumentcategory'),)


class InstrumentsInstrumentcategory(models.Model):
    name = models.CharField(unique=True, max_length=255)

    class Meta:
        managed = False
        db_table = 'instruments_instrumentcategory'


class ProfilesProfile(models.Model):
    display_name = models.CharField(max_length=255, blank=True, null=True)
    bio = models.TextField(blank=True, null=True)
    is_composer = models.BooleanField()
    is_reviewer = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    owner = models.OneToOneField(AuthUser, models.DO_NOTHING)
    avatar = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'profiles_profile'


class ReviewsReview(models.Model):
    status = models.CharField(max_length=20)
    reviewed_at = models.DateTimeField()
    reviewer = models.ForeignKey(AuthUser, models.DO_NOTHING)
    track = models.ForeignKey('TracksTrack', models.DO_NOTHING)
    feedback = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'reviews_review'


class ReviewsReviewhistory(models.Model):
    edited_at = models.DateTimeField()
    updated_feedback = models.TextField()
    revision_number = models.IntegerField()
    editor = models.ForeignKey(AuthUser, models.DO_NOTHING)
    review = models.ForeignKey(ReviewsReview, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'reviews_reviewhistory'


class SocialaccountSocialaccount(models.Model):
    provider = models.CharField(max_length=200)
    uid = models.CharField(max_length=191)
    last_login = models.DateTimeField()
    date_joined = models.DateTimeField()
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    extra_data = models.JSONField()

    class Meta:
        managed = False
        db_table = 'socialaccount_socialaccount'
        unique_together = (('provider', 'uid'),)


class SocialaccountSocialapp(models.Model):
    provider = models.CharField(max_length=30)
    name = models.CharField(max_length=40)
    client_id = models.CharField(max_length=191)
    secret = models.CharField(max_length=191)
    key = models.CharField(max_length=191)
    provider_id = models.CharField(max_length=200)
    settings = models.JSONField()

    class Meta:
        managed = False
        db_table = 'socialaccount_socialapp'


class SocialaccountSocialtoken(models.Model):
    token = models.TextField()
    token_secret = models.TextField()
    expires_at = models.DateTimeField(blank=True, null=True)
    account = models.ForeignKey(SocialaccountSocialaccount, models.DO_NOTHING)
    app = models.ForeignKey(SocialaccountSocialapp, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'socialaccount_socialtoken'
        unique_together = (('app', 'account'),)


class TracksGenre(models.Model):
    name = models.CharField(unique=True, max_length=255)

    class Meta:
        managed = False
        db_table = 'tracks_genre'


class TracksMood(models.Model):
    name = models.CharField(unique=True, max_length=255)

    class Meta:
        managed = False
        db_table = 'tracks_mood'


class TracksProjecttype(models.Model):
    name = models.CharField(unique=True, max_length=255)

    class Meta:
        managed = False
        db_table = 'tracks_projecttype'


class TracksTrack(models.Model):
    title = models.CharField(max_length=255)
    notes = models.TextField()
    status = models.CharField(max_length=25)
    project_type = models.ForeignKey(TracksProjecttype, models.DO_NOTHING, blank=True, null=True)
    genre = models.ForeignKey(TracksGenre, models.DO_NOTHING, blank=True, null=True)
    mood = models.ForeignKey(TracksMood, models.DO_NOTHING, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    album = models.ForeignKey(AlbumsAlbum, models.DO_NOTHING, blank=True, null=True)
    assigned_composer = models.ForeignKey(AuthUser, models.DO_NOTHING, blank=True, null=True)
    vocals_needed = models.BooleanField()
    vocals_status = models.CharField(max_length=20, blank=True, null=True)
    owner = models.ForeignKey(AuthUser, models.DO_NOTHING, related_name='trackstrack_owner_set')

    class Meta:
        managed = False
        db_table = 'tracks_track'


class TracksTrackInstruments(models.Model):
    track = models.ForeignKey(TracksTrack, models.DO_NOTHING)
    instrument = models.ForeignKey(InstrumentsInstrument, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'tracks_track_instruments'
        unique_together = (('track', 'instrument'),)
